/*
 * CFD
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ImageApiController binds http requests to an api service and writes the service results to the http response
type ImageApiController struct {
	service ImageApiServicer
	errorHandler ErrorHandler
}

// ImageApiOption for how the controller is set up.
type ImageApiOption func(*ImageApiController)

// WithImageApiErrorHandler inject ErrorHandler into controller
func WithImageApiErrorHandler(h ErrorHandler) ImageApiOption {
	return func(c *ImageApiController) {
		c.errorHandler = h
	}
}

// NewImageApiController creates a default api controller
func NewImageApiController(s ImageApiServicer, opts ...ImageApiOption) Router {
	controller := &ImageApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ImageApiController
func (c *ImageApiController) Routes() Routes {
	return Routes{ 
		{
			"AddImage",
			strings.ToUpper("Post"),
			"/CFD/1.0.0/image",
			c.AddImage,
		},
		{
			"DeleteImage",
			strings.ToUpper("Delete"),
			"/CFD/1.0.0/image/{imageId}",
			c.DeleteImage,
		},
		{
			"GetImage",
			strings.ToUpper("Get"),
			"/CFD/1.0.0/image/{imageId}",
			c.GetImage,
		},
	}
}

// AddImage - Add an image to the restaraunt
func (c *ImageApiController) AddImage(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	fileNameParam, err := ReadFormFileToTempFile(r, "fileName")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
			result, err := c.service.AddImage(r.Context(), fileNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteImage - Remove image
func (c *ImageApiController) DeleteImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	imageIdParam, err := parseInt32Parameter(params["imageId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteImage(r.Context(), imageIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetImage - Get image
func (c *ImageApiController) GetImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	imageIdParam, err := parseInt32Parameter(params["imageId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetImage(r.Context(), imageIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
