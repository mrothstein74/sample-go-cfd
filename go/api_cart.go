/*
 * CFD
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CartApiController binds http requests to an api service and writes the service results to the http response
type CartApiController struct {
	service CartApiServicer
	errorHandler ErrorHandler
}

// CartApiOption for how the controller is set up.
type CartApiOption func(*CartApiController)

// WithCartApiErrorHandler inject ErrorHandler into controller
func WithCartApiErrorHandler(h ErrorHandler) CartApiOption {
	return func(c *CartApiController) {
		c.errorHandler = h
	}
}

// NewCartApiController creates a default api controller
func NewCartApiController(s CartApiServicer, opts ...CartApiOption) Router {
	controller := &CartApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CartApiController
func (c *CartApiController) Routes() Routes {
	return Routes{ 
		{
			"AddCartItem",
			strings.ToUpper("Post"),
			"/CFD/1.0.0/cart",
			c.AddCartItem,
		},
		{
			"DeleteCartItem",
			strings.ToUpper("Delete"),
			"/CFD/1.0.0/cart/{itemId}",
			c.DeleteCartItem,
		},
		{
			"ListCart",
			strings.ToUpper("Get"),
			"/CFD/1.0.0/cart",
			c.ListCart,
		},
	}
}

// AddCartItem - Add a menu item a cart
func (c *CartApiController) AddCartItem(w http.ResponseWriter, r *http.Request) {
	menuItemParam := MenuItem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&menuItemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMenuItemRequired(menuItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddCartItem(r.Context(), menuItemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteCartItem - Remove item from cart
func (c *CartApiController) DeleteCartItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam, err := parseInt32Parameter(params["itemId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteCartItem(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListCart - List all cart items
func (c *CartApiController) ListCart(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListCart(r.Context(), limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
