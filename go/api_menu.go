/*
 * CFD
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MenuApiController binds http requests to an api service and writes the service results to the http response
type MenuApiController struct {
	service MenuApiServicer
	errorHandler ErrorHandler
}

// MenuApiOption for how the controller is set up.
type MenuApiOption func(*MenuApiController)

// WithMenuApiErrorHandler inject ErrorHandler into controller
func WithMenuApiErrorHandler(h ErrorHandler) MenuApiOption {
	return func(c *MenuApiController) {
		c.errorHandler = h
	}
}

// NewMenuApiController creates a default api controller
func NewMenuApiController(s MenuApiServicer, opts ...MenuApiOption) Router {
	controller := &MenuApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MenuApiController
func (c *MenuApiController) Routes() Routes {
	return Routes{ 
		{
			"AddMenuItem",
			strings.ToUpper("Post"),
			"/CFD/1.0.0/menu",
			c.AddMenuItem,
		},
		{
			"ListMenu",
			strings.ToUpper("Get"),
			"/CFD/1.0.0/menu",
			c.ListMenu,
		},
		{
			"ShowMenuItemById",
			strings.ToUpper("Get"),
			"/CFD/1.0.0/menu/{itemId}",
			c.ShowMenuItemById,
		},
	}
}

// AddMenuItem - Create a menu item
func (c *MenuApiController) AddMenuItem(w http.ResponseWriter, r *http.Request) {
	menuItemParam := MenuItem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&menuItemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMenuItemRequired(menuItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddMenuItem(r.Context(), menuItemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListMenu - List all menu items
func (c *MenuApiController) ListMenu(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListMenu(r.Context(), limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ShowMenuItemById - Info for a specific menu item
func (c *MenuApiController) ShowMenuItemById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	
	result, err := c.service.ShowMenuItemById(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
